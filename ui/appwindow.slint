struct UiField {
    image: image,
    highlighted_for_move: bool,
}

component ChessField inherits Rectangle {
    callback clicked(int);
    in property <image> icon;
    in property <bool> highlighted_for_move;
    in property <int> index;

    width: 64px;
    height: 64px;

    Image {
        source: icon;
        height: parent.height * 0.75;
    }

    Rectangle {
        width: parent.width;
        height: parent.height;
        background: highlighted_for_move ? #FFFF0060 : transparent;
    }

    TouchArea {
        clicked => {
            root.clicked(index);
        }
    }
}

component PromotionDialog inherits Rectangle {
    in property <[UiField]> promotion_choices;
    callback piece_selected(int);

    width: 320px;
    height: 320px;
    background: #FFFFFFAA; // Semi-transparent white background

    for choice[i] in promotion_choices: Rectangle {
        width: parent.width / 5;
        height: parent.height / 5;
        x: i * (parent.width / 5);
        background: white;
        border-radius: 10px;

        Image {
            source: choice.image;
            height: parent.height * 0.75;
        }

        TouchArea {
            clicked => {
                root.piece_selected(i);
            }
        }
    }
}

export component MainWindow inherits Window {
    min-width: 512px;
    min-height: 512px;

    callback clicked(int);
    in property <[UiField]> chess_fields: [];

    callback make_move(string);

    in property <[UiField]> promotion_choices: [];
    in property <bool> promotion_dialog_visible: false;
    callback promotion_selected(int);

    for chess_field[i] in chess_fields: ChessField {
        x: mod(i, 8) * min(parent.width, parent.height) / 8;
        y: (7 - floor(i / 8)) * min(parent.width, parent.height) / 8;
        width: min(parent.width, parent.height) / 8;
        height: min(parent.width, parent.height) / 8;
        background: mod(i + floor(i / 8), 2) == 0 ? #AE8A68 : #ECDAB9;
        icon: chess_field.image;
        highlighted_for_move: chess_field.highlighted_for_move;
        index: i;
        clicked => {
            root.clicked(i);
        }
    }
    PromotionDialog {
        promotion_choices: root.promotion_choices;
        visible: root.promotion_dialog_visible;
        piece_selected(index) => {
            root.promotion_selected(index);
        }
    }
}
